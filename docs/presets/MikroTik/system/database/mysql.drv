<?php if ( ! defined('ENVIRONMENT') ) exit('Only STG can run script!' . "\n");

	class Database {
	
		// PRIVATE VARIABLES:
		private $connected;
		private $identifier;
		
		// LOADED CONFIGURATIONS:
		private $config	=	array();
		
		// LOADED CLASSES:
		private $log	=	NULL;

		// CASHED DATA TREE:
		private $cache	=	array();

		// CLASS CONSTRUCTOR:
		public function __construct($data) {
			// PARSE RECIVED DATA:
			foreach($data as $key => $value) {
				$this->$key = $value;
			}
			// SEND MESSAGE, THAT LOADED:
			$this->log->message(__CLASS__, "MySQL Class loaded...", "debug");
			
			// CONNECT TO DATABASE:
			$this->connect();
		}
		
		// CONNECT TO DATABASE:
		private function connect() {
			if ( ! empty($this->config) ) {
				$this->identifier = mysql_connect($this->config['hostname'], $this->config['username'], $this->config['password']);
				if ( $this->identifier ) {
					if ( mysql_select_db($this->config['database'], $this->identifier) )  {
						$this->connected = TRUE;
						$this->log->message(__CLASS__, "Connection with database is established...", "debug");
					} else {
						$this->connected = FALSE;
						$this->log->message(__CLASS__, "Cannot select database, database name is incorrect!", "error");
					}
					return $this->connected;
				} else {
					$this->log->message(__CLASS__, "Cannot connect to database, authorization data wrong or server halted!", "error");
					return FALSE;
				}
			} else {
				$this->log->message(__CLASS__, "Cannot connect to database, no `$this->config` data!", "error");
				return FALSE;
			}
		}

		// MySQL DATABASE QUERY GENERATE:
		private function select($cols, $table, $where = array()) {
			$return = array();
			$query = "SELECT " . $cols . " FROM " . $table;
			if ( ! empty($where) ) {
				$query .= " WHERE";
				foreach($where as $key => $value) {
					$query .= " ";
					$query .= "`" . $key . "` = '" . $value . "'";
				}
			}
			$result = mysql_query ($query, $this->identifier);
			while ( $row = mysql_fetch_assoc($result) ) {
				array_push($return, $row);
			}
			return $return;
		}

		/* >> DATABASE DATA QUERIES << */

		// 1. GET USER RATE:
		public function get_user_rate() {
			if ( $this->connected ) {
				if ( $this->get_user_reassigned_rate() == NULL ) {
					 $this->get_tariff_rate( $this->get_user_tariff() );
				}
				return $this->cache['USER']['RATE'];
			} else $this->log->message(__CLASS__, "Cannot get USER RATE data from database, no connection!", "error");
		}

		// 1.1 GET USER REASSIGNED RATE (TX = RX):
		private function get_user_reassigned_rate() {
			if ( empty($this->cache['USER']['RATE']['REASSIGNED']) ) {
				$result = $this->select("speed", "userspeeds", array("login" => LOGIN));
				if ( ! empty($result[0]['speed']) ) {
					$this->cache['USER']['RATE']['REASSIGNED'] = $result[0]['speed'];
					$this->log->message(__CLASS__, "USER REASSIGNED RATE - `" . $this->cache['USER']['RATE']['REASSIGNED'] . "`!", "debug");
				} else $this->log->message(__CLASS__, "USER REASSIGNED RATE - `NULL`!", "debug");
			}
			return $this->cache['USER']['RATE']['REASSIGNED'];
		}
		
		// 1.2 GET TARIFF RATE (TX & RX):
		private function get_tariff_rate($tariff) {
			if ( empty($this->cache['USER']['RATE']['TARIFF']) AND !empty($tariff) ) {
				$result = $this->select("speedup, speeddown", "speeds", array("tariff" => $tariff));
				if ( ! empty($result[0]['speedup']) OR !empty($result[0]['speeddown']) ) {
					if ( ! empty($result[0]['speedup']) ) {
						$this->cache['USER']['RATE']['TARIFF']['TX'] = $result[0]['speedup'];
						$this->log->message(__CLASS__, "USER TARIFF TX RATE - `" . $this->cache['USER']['RATE']['TARIFF']['TX'] . "`;", "debug");
					} else $this->log->message(__CLASS__, "USER TARIFF TX RATE - `NULL`!", "debug");
					if ( ! empty($result[0]['speeddown']) ) {
						$this->cache['USER']['RATE']['TARIFF']['RX'] = $result[0]['speeddown'];
						$this->log->message(__CLASS__, "USER TARIFF RX RATE - `" . $this->cache['USER']['RATE']['TARIFF']['RX'] . "`;", "debug");
					} else $this->log->message(__CLASS__, "USER TARIFF RX RATE - `NULL`!", "debug");
				} else $this->log->message(__CLASS__, "USER RATE - `NULL`!", "error");
			}
			return $this->cache['USER']['RATE']['TARIFF'];
		}

		// 1.2.1 GET USER TARIFF (NAME):
		private function get_user_tariff() {
			if ( empty($this->cache['USER']['TARIFF']) ) {
				$result = $this->select("Tariff", "users", array("login" => LOGIN));
				if ( ! empty($result[0]['Tariff']) AND $result[0]['Tariff'] != "*_NO_TARIFF_*" ) {
					$this->cache['USER']['TARIFF'] = $result[0]['Tariff'];
					$this->log->message(__CLASS__, "USER TARIFF - `" . $this->cache['USER']['TARIFF'] . "`;", "debug");
				} else $this->log->message(__CLASS__, "USER TARIFF - `NULL`!", "error");
			}
			return $this->cache['USER']['TARIFF'];
		}

		// 2. GET NAS DATA (IP, TYPE):
		public function get_nas_data() {
			if ( empty($this->cache['NAS']['IP']) AND empty($this->cache['NAS']['TYPE']) ) {
				if ( $this->connected ) {
					$result = $this->select("nasip, nastype", "nas", array("netid" => $this->get_network_id()));
					if ( ! empty($result[0]['nasip']) ) {
						$this->cache['NAS']['IP'] = $result[0]['nasip'];
						$this->log->message(__CLASS__, "NAS IP - `" . $this->cache['NAS']['IP'] . "`;", "debug");
					} else $this->log->message(__CLASS__, "NAS IP - `NULL`!", "error");
					if ( ! empty($result[0]['nastype']) ) {
						$this->cache['NAS']['TYPE']	= $result[0]['nastype'];
						$this->log->message(__CLASS__, "NAS TYPE - `" . $this->cache['NAS']['TYPE'] . "`;", "debug");
					} else $this->log->message(__CLASS__, "NAS TYPE - `NULL`!", "error");
				} else $this->log->message(__CLASS__, "Cannot get NAS DATA from database, no connection!", "error");
			}
			return $this->cache['NAS'];
		}

		// 2.1 GET USER NETWORK ID (INT):
		public function get_network_id() {
			if ( empty($this->cache['NETWORK']['ID']) ) {
				$result = $this->select("netid", "nethosts", array("ip" => IP));
				if ( ! empty($result[0]['netid']) ) {
					$this->cache['NETWORK']['ID'] = $result[0]['netid'];
					$this->log->message(__CLASS__, "USER NETWORK ID - `" . $this->cache['NETWORK']['ID'] . "`;", "debug");
				} else $this->log->message(__CLASS__, "USER NETWORK ID - `NULL`!", "error");
			}
			return $this->cache['NETWORK']['ID'];
		}

		// 3. GET USER MAC ADDRESS:
		public function get_user_mac() {
			if ( empty($this->cache['USER']['MAC']) ) {
				$result = $this->select("mac", "nethosts", array("ip" => IP));
				if ( ! empty($result[0]['mac']) ) {
					$this->cache['USER']['MAC'] = $result[0]['mac'];
					$this->log->message(__CLASS__, "USER MAC - `" . $this->cache['USER']['MAC'] . "`;", "debug");
				} else $this->log->message(__CLASS__, "USER MAC - `NULL`!", "error");
			}
			return $this->cache['USER']['MAC'];
		}
		
		// 4. GET USER PASSWORD (FOR PPP):
		public function get_user_password() {
			if ( empty($this->cache['USER']['PASSWORD']) ) {
				$result = $this->select("Password", "users", array("login" => LOGIN));
				if ( ! empty($result[0]['Password']) ) {
					$this->cache['USER']['PASSWORD'] = $result[0]['Password'];
					$this->log->message(__CLASS__, "USER PASSWORD - `" . $this->cache['USER']['PASSWORD'] . "`;", "debug");
				} else $this->log->message(__CLASS__, "USER PASSWORD - `NULL`!", "error");
			}
			return $this->cache['USER']['PASSWORD'];
		}

		/* >> DATABASE DATA QUERIES << */
	}
?>