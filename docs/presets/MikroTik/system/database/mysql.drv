<?php if ( !defined('ENVIRONMENT') ) exit('Only STG can run script!' . "\n");

    class Database {
        // MySQL API:
        private $connected;
        private $identifier;
        private $cache = array(
            'USER' => array(
                'TARIFF' => NULL,
                'RATE' => NULL,
                'MAC' => NULL,
            ),
            'NAS' => array(
                'IP' => NULL,
                'TYPE' => NULL,
                'OPTIONS' => NULL,
            ),
            'NETWORK' => array(
                'ID' => NULL,
            )
        );
        
        // Recived data from `ubilling.cls`:
        private $config;
        private $log;
        
        // Constructor:
        public function __construct($data) {
            // Put all recived data to specified vars:
            foreach ($data as $key => $value) {
                $this->$key = $value;
            }
            // Write log message, that class is loaded:
            $this->log->message(__CLASS__, "MySQL Class loaded.", "debug");
            // Connect to database:
            $this->connect();
        }

        private function connect() {
            if ( !empty($this->config) ) {
                $this->identifier = mysql_connect($this->config['hostname'], $this->config['username'], $this->config['password']);
                if ( $this->identifier ) {
                    if ( mysql_select_db($this->config['database'], $this->identifier) ) {
                        $this->connected = TRUE;
                        $this->log->message(__CLASS__, "Connection with database is established...", "debug");
                    } else {
                        $this->connected = FALSE;
                        $this->log->message(__CLASS__, "Cannot select database, database name is incorrect!", "error");
                    }
                    return $this->connected;
                } else $this->log->message(__CLASS__, "Cannot connect to database, authorization data wrong or server halted!", "error");
            } else $this->log->message(__CLASS__, "Cannot connect to database, no configurations data!", "error");
        }

        private function select($cols, $table, $where = array()) {
            $return = array();
            $query = "SELECT " . $cols . " FROM " . $table;
            if ( !empty($where) ) {
                $query .= " WHERE";
                foreach ($where as $key => $value) {
                    $query .= " ";
                    $query .= "`" . $key . "` = '" . $value . "'";
                }
            }
            $result = mysql_query($query, $this->identifier);
            while ($row = mysql_fetch_assoc($result)) {
                array_push($return, $row);
            }
            return $return;
        }

        /* DATABASE DATA QUERIES << */

        public function get_user_rate() {
            if ( $this->connected ) {
                if ( $this->get_user_reassigned_rate() == NULL ) {
                    $this->get_tariff_rate($this->get_user_tariff());
                }
                return $this->cache['USER']['RATE'];
            } else $this->log->message(__CLASS__, "Cannot get USER RATE data from database, no connection!", "error");
        }

        private function get_user_reassigned_rate() {
            if ( empty($this->cache['USER']['RATE']) ) {
                $result = $this->select("speed", "userspeeds", array("login" => LOGIN));
                foreach ($result[0] as $key => $value) {
                    switch ($key) {
                        case 'speed':
                            if ( !empty($value) ) {
                                $this->cache['USER']['RATE']['TX'] = $value;
                                $this->cache['USER']['RATE']['RX'] = $value;
                                $this->log->message(__CLASS__, "USER REASSIGNED RATE - `" . $value . "`!", "debug");
                            } else $this->log->message(__CLASS__, "USER REASSIGNED RATE - `NULL`!", "debug");
                            break;
                    }
                }
            }
            return $this->cache['USER']['RATE'];
        }

        private function get_tariff_rate($tariff) {
            if ( empty($this->cache['USER']['RATE']) AND !empty($tariff) ) {
                $result = $this->select("speedup, speeddown", "speeds", array("tariff" => $tariff));
                foreach ($result[0] as $key => $value) {
                    switch ($key) {
                        case 'speedup':
                            if ( !empty($value) ) {
                                $this->cache['USER']['RATE']['TX'] = $value;
                                $this->log->message(__CLASS__, "USER TARIFF TX RATE - `" . $value . "`;", "debug");
                            } else $this->log->message(__CLASS__, "USER TARIFF TX RATE - `NULL`!", "debug");
                            break;
                        case 'speeddown':
                            if ( !empty($value) ) {
                                $this->cache['USER']['RATE']['RX'] = $value;
                                $this->log->message(__CLASS__, "USER TARIFF RX RATE - `" . $value . "`;", "debug");
                            } else $this->log->message(__CLASS__, "USER TARIFF RX RATE - `NULL`!", "debug");
                            break;
                    }
                }
            }
            return $this->cache['USER']['RATE'];
        }

        private function get_user_tariff() {
            if ( empty($this->cache['USER']['TARIFF']) ) {
                $result = $this->select("Tariff", "users", array("login" => LOGIN));
                foreach ($result[0] as $key => $value) {
                    switch ($key) {
                        case 'Tariff':
                            if ( !empty($value) AND $value != "*_NO_TARIFF_*" ) {
                                $this->cache['USER']['TARIFF'] = $value;
                                $this->log->message(__CLASS__, "USER TARIFF - `" . $value . "`;", "debug");
                            } else $this->log->message(__CLASS__, "USER TARIFF - `NULL`!", "error");
                            break;
                    }
                }
            }
            return $this->cache['USER']['TARIFF'];
        }

        public function get_nas_data() {
            if ( empty($this->cache['NAS']['IP']) AND empty($this->cache['NAS']['TYPE']) ) {
                if ( $this->connected ) {
                    $result = $this->select("nasip, nastype, options", "nas", array("netid" => $this->get_network_id()));
                    foreach ($result[0] as $key => $value) {
                        switch ($key) {
                            case 'nasip':
                                if ( !empty($value) ) {
                                    $this->cache['NAS']['IP'] = $value;
                                    $this->log->message(__CLASS__, "NAS IP - `" . $this->cache['NAS']['IP'] . "`;", "debug");
                                } else $this->log->message(__CLASS__, "NAS IP - `NULL`!", "error");
                                break;
                            case 'nastype':
                                if ( !empty($value) ) {
                                    $this->cache['NAS']['TYPE'] = $value;
                                    $this->log->message(__CLASS__, "NAS TYPE - `" . $value . "`;", "debug");
                                } else $this->log->message(__CLASS__, "NAS TYPE - `NULL`!", "error");
                                break;
                            case 'options':
                                if ( !empty($value) ) {
                                    $this->cache['NAS']['OPTIONS'] = unserialize(base64_decode($value));
                                    foreach ($this->cache['NAS']['OPTIONS'] as $optKey => $optValue) {
                                        $this->log->message(__CLASS__, "NAS OPTION `" . $optKey . "` VALUE `" . $optValue . "`;", "debug");
                                    }
                                } else $this->log->message(__CLASS__, "No `nas`.`options` were setted for NAS - " . $this->cache['NAS']['IP'] . "!", "debug");
                        }
                    }
                } else $this->log->message(__CLASS__, "Cannot get NAS DATA from database, no connection!", "error");
            }
            return $this->cache['NAS'];
        }

        public function get_network_id() {
            if ( empty($this->cache['NETWORK']['ID']) ) {
                $result = $this->select("netid", "nethosts", array("ip" => IP));
                foreach ($result[0] as $key => $value) {
                    switch ($key) {
                        case 'netid':
                            if ( !empty($value) ) {
                                $this->cache['NETWORK']['ID'] = $value;
                                $this->log->message(__CLASS__, "USER NETWORK ID - `" . $value . "`;", "debug");
                            } else $this->log->message(__CLASS__, "USER NETWORK ID - `NULL`!", "error");
                            break;
                    }
                }
            }
            return $this->cache['NETWORK']['ID'];
        }

        public function get_user_mac() {
            if ( empty($this->cache['USER']['MAC']) ) {
                $result = $this->select("mac", "nethosts", array("ip" => IP));
                foreach ($result[0] as $key => $value) {
                    switch ($key) {
                        case 'mac':
                            if ( !empty($value) ) {
                                $this->cache['USER']['MAC'] = $value;
                                $this->log->message(__CLASS__, "USER MAC - `" . $value . "`;", "debug");
                            } else $this->log->message(__CLASS__, "USER MAC - `NULL`!", "error");
                            break;
                    }
                }
            }
            return $this->cache['USER']['MAC'];
        }
        
        /* >> DATABASE DATA QUERIES */
        
    }
?>